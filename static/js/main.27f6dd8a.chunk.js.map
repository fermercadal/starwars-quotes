{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["quotesData","Quotes","console","log","App","props","state","currentQuote","text","undefined","author","source","tweetLink","updateQuote","bind","getNewQuote","quote","this","setState","randomQuote","Math","floor","random","length","className","id","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"skEAIMA,G,WAAkBC,QAExBC,QAAQC,IAAIH,G,IA+DGI,E,YA5Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,aAAc,CACZC,UAAMC,EACNC,YAAQD,EACRE,YAAQF,EACRG,eAAWH,IAIf,EAAKI,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAbF,E,yEAgBNE,GACXC,KAAKC,UAAS,WACZ,MAAQ,CACNX,aAAc,CACZC,KAAMR,EAAWgB,GAAOR,KACxBE,OAAQV,EAAWgB,GAAON,OAC1BC,OAAQX,EAAWgB,GAAOL,OAC1BC,UAAW,0CAA4CZ,EAAWgB,GAAOR,KAAO,QAAUR,EAAWgB,GAAON,OAAS,OAASV,EAAWgB,GAAOL,c,oCAOtJ,IAAIQ,EAAcC,KAAKC,MAAMD,KAAKE,SAAWtB,EAAWuB,QACxDN,KAAKJ,YAAYM,K,0CAIjBF,KAAKF,gB,+BAIL,OACE,0BAAMS,UAAU,YACd,6BAASA,UAAU,iBACjB,gDAEA,6BAASC,GAAG,aACV,uBAAGA,GAAG,QAAN,IAAeR,KAAKX,MAAMC,aAAaC,KAAvC,KACA,2BAAOiB,GAAG,UAAUR,KAAKX,MAAMC,aAAaG,QAC5C,2BAAOe,GAAG,UAAUR,KAAKX,MAAMC,aAAaI,QAE5C,uBAAGc,GAAG,cAAcC,KAAMT,KAAKX,MAAMC,aAAaK,WAAlD,qBAGA,4BAAQa,GAAG,YAAYE,QAASV,KAAKF,aAArC,oB,GArDMa,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27f6dd8a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport data from './quotes';\nconst quotesData = data.Quotes;\n\nconsole.log(quotesData);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentQuote: {\n        text: undefined,\n        author: undefined,\n        source: undefined,\n        tweetLink: undefined\n      }\n    }\n\n    this.updateQuote = this.updateQuote.bind(this);\n    this.getNewQuote = this.getNewQuote.bind(this);\n  }\n\n  updateQuote (quote) {\n    this.setState(() => {\n      return ({\n        currentQuote: {\n          text: quotesData[quote].text,\n          author: quotesData[quote].author,\n          source: quotesData[quote].source,\n          tweetLink: \"https://twitter.com/intent/tweet?text='\" + quotesData[quote].text + \"' by \" + quotesData[quote].author + \" on \" + quotesData[quote].source\n        }\n      })\n    });\n  }\n\n  getNewQuote(){\n    var randomQuote = Math.floor(Math.random() * quotesData.length);\n    this.updateQuote(randomQuote);\n  }\n  \n  componentDidMount() {\n    this.getNewQuote();\n  }\n\n  render() {\n    return (\n      <main className=\"App-main\">\n        <section className=\"App-container\">\n          <h1>Star Wars Quotes</h1>\n\n          <article id=\"quote-box\">\n            <p id=\"text\">\"{this.state.currentQuote.text}\"</p>\n            <small id=\"author\">{this.state.currentQuote.author}</small>\n            <small id=\"source\">{this.state.currentQuote.source}</small>\n\n            <a id=\"tweet-quote\" href={this.state.currentQuote.tweetLink}>\n              Tweet this quote.\n            </a>\n            <button id=\"new-quote\" onClick={this.getNewQuote}>New quote</button>\n          </article>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}